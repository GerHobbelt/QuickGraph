{
module DotParserProject.Gen.DotLexer

open DotParserProject.DotParser
open Microsoft.FSharp.Text.Lexing
open System

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf

let keywords =   
    [   
        "node", NODE;   
        "edge", EDGE;   
        "graph", GRAPH;   
        "digraph", DIGRAPH;   
        "subgraph", SUBGR;   
        "strict", STRICT;     
    ] |> Map.ofList 
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']
let id = ['a'-'z' 'A'-'Z' '_'](['a'-'z' 'A'-'Z' '_' '0'-'9'])*|['-']?('.'['0'-'9']+|['0'-'9']+('.'['0'-'9']+)?)

rule tokenize = parse
| whitespace { tokenize lexbuf }
| '"' { ID ( (string lexbuf.StartPos "" lexbuf) ) }
| '[' { LSQBRACE <| lexeme lexbuf }
| ']' { RSQBRACE <| lexeme lexbuf }
| '{' { LCURBRACE <| lexeme lexbuf }
| '}' { RCURBRACE <| lexeme lexbuf }
| '=' { ASSIGN <| lexeme lexbuf }
| ':' { COL <| lexeme lexbuf }
| ';' { SEMI <| lexeme lexbuf }
| ',' { COMMA <| lexeme lexbuf }
| "--" { EDGEOP <| lexeme lexbuf }
| "->" { DIEDGEOP <| lexeme lexbuf }
| id { match keywords.TryFind((lexeme lexbuf).ToLower()) with
        | Some(keyword) -> keyword <| (lexeme lexbuf).ToLower()
        | None -> ID <| lexeme lexbuf }
| eof { RNGLR_EOF <| lexeme lexbuf }
| _ { failwithf "unexpected input: %s" <| lexeme lexbuf }

and string pos s = parse
| "\\"    { string pos s lexbuf }
| "\r"    { string pos s lexbuf }
| "\""    { s }
| "\n"    { lexbuf.EndPos <- lexbuf.EndPos.NextLine;
            string pos s lexbuf }
| eof     { failwithf "end of file in string started at or near %A" pos }
| _       { string pos (s + (lexeme lexbuf)) lexbuf }