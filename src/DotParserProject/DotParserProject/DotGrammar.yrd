{
open DotParserProject.GraphData
open Option
open System.Collections.Generic
open QuickGraph

let mutable data = new GraphData()
}

tokens {
    _ of string
}

options {   
    translate = true
    module = "DotParserProject.Gen.DotParser"
    infEpsPath = epsilons
    pos = uint64
}

module DotGrammar

[<Start>]
graph: g=graph_type [ ID ] LCURBRACE stmt_list<<g>> RCURBRACE { g }

graph_type:
    s=[ STRICT ] GRAPH   { data.graph <- new UndirectedGraph<_,_>    (isSome s); data } |
    s=[ STRICT ] DIGRAPH { data.graph <- new BidirectionalGraph<_,_> (isSome s); data }

stmt_list<<(g:GraphData)>>: (stmt<<g>> [ SEMI ])*

stmt<<(g:GraphData)>>:
    node_stmt<<g>> |
    edge_stmt<<g>> |
    attr_stmt<<g>> |
    ID ASSIGN ID |
    subgraph

attr_stmt<<(g:GraphData)>>:
    t=(t=GRAPH {t} | t=NODE{t} | t=EDGE {t}) l=attr_list { g.AddDefaultAttributes t l }

attr_list: (LSQBRACE [a_list] RSQBRACE)*

a_list: ID ASSIGN ID [COMMA | SEMI] [a_list]

edge_stmt<<(g:GraphData)>>: (node_id | subgraph) edgeRHS [attr_list]

edgeRHS: edgeop (node_id | subgraph) [edgeRHS]

node_stmt<<(g:GraphData)>>: name=node_id [attr_list] { g.AddNode name }

node_id: ID [port] { ID }

port: COL ID

edgeop: EDGEOP | DIEDGEOP

subgraph: [SUBGR [ID]] LCURBRACE stmt_list RCURBRACE

